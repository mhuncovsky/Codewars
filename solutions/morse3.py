#! python3


MORSE_CODE = {
    '.-...': '&', '--..--': ',', '....-': '4', '.....': '5',
    '...---...': 'SOS', '-...': 'B', '-..-': 'X', '.-.': 'R',
    '.--': 'W', '..---': '2', '.-': 'A', '..': 'I', '..-.': 'F',
    '.': 'E', '.-..': 'L', '...': 'S', '..-': 'U', '..--..': '?',
    '.----': '1', '-.-': 'K', '-..': 'D', '-....': '6',
    '-...-': '=', '---': 'O', '.--.': 'P', '.-.-.-': '.',
    '--': 'M', '-.': 'N', '....': 'H', '.----.': "'",
    '...-': 'V', '--...': '7', '-.-.-.': ';', '-....-': '-',
    '..--.-': '_', '-.--.-': ')', '-.-.--': '!', '--.': 'G',
    '--.-': 'Q', '--..': 'Z', '-..-.': '/', '.-.-.': '+',
    '-.-.': 'C', '---...': ':', '-.--': 'Y', '-': 'T',
    '.--.-.': '@', '...-..-': '$', '.---': 'J', '-----': '0',
    '----.': '9', '.-..-.': '"', '-.--.': '(', '---..': '8',
    '...--': '3'
}

ALPHA = {v: k for k, v in MORSE_CODE.items()}


# pause between dots/dashes 0, chars 000, words 0000000

def encode(s):
    from struct import unpack
    morse = ''.join('0'.join(ALPHA[x]) + '000' if x != ' '
                    else '0000' for x in s.upper()).replace(
        '.', '1').replace('-', '111')[:-3]
    morse += (32 - len(morse) % 32) * '0'
    morse = bytes([int(morse[i:i + 8], 2) for i in range(0, len(morse), 8)])
    return unpack('>' + 'i' * (len(morse) // 4), morse)


def decode(ilist):
    from struct import pack
    bits = pack('>' + 'i' * len(ilist), *ilist)
    bits = ''.join('{:0>8}'.format(bin(x)[2:]) for x in bits).strip('0')
    bits = bits.replace('1' * 3, '-').replace('1', '.')
    bits = bits.replace('0' * 7, '   ').replace('0' * 3, ' ').replace('0', '')
    words = [word.split() for word in bits.split('   ')]
    return ' '.join(''.join(MORSE_CODE[c] for c in word if c)
                    for word in words if word)


# def decodeMorse(morseCode):
#     words = [word.split() for word in morseCode.split('   ')]
#     return ' '.join(''.join(MORSE_CODE[c] for c in word if c)
#                     for word in words if word)


def decodeBits(bits):
    bits = bits.strip('0')
    rate = set(len(x) for x in bits.split('0') if x).union(
        set(len(x) for x in bits.split('1') if x))
    if len(rate) > 1:
        rate = min(rate)
    else:
        rate = rate.pop()

    print(rate, bits)
    bits = bits.replace('0' * rate, '0').replace('1' * rate, '1')
    bits = bits.replace('0' * 7, '   ')
    bits = bits.replace('0' * 3, ' ')
    bits = bits.replace('1' * 3, '-').replace('1', '.')
    bits = bits.replace('0', '')
    return bits


def kmeans(k, data, iters=5):
    from math import sqrt
    clusters = []
    for i in range(k):
        m = k / (i + 1) * mean(data)
        d = [x for x in data if x < m]
        m = mean(d)
        clusters.append([m, d])
    clusters[0][0] = min(data)
    clusters[-1][0] = max(data)
    for i in range(iters):
        for c in clusters:
            c[1] = []
        for x in data:
            dist = []
            for j in range(k):
                dist.append(sqrt(abs(x ** 2 - clusters[j][0] ** 2)))
            clusters[dist.index(min(dist))][1].append(x)
        for c in clusters:
            c[0] = mean(c[1])
    return sorted([c[0] for c in clusters])


def mean(x):
    return sum(x) / len(x) if x else 0


def decodeBitsAdvanced(bits):
    bits = bits.strip('0')
    ones = [float(len(x)) for x in bits.split('0') if x][::-1]
    zeros = [float(len(x)) for x in bits.split('1') if x][::-1]

    if not ones:
        return ''
    if len(ones) < 10:
        ret = short(ones, zeros)
    else:
        cc0 = kmeans(3, zeros)
        cc1 = kmeans(2, ones)
        # print(cc0)
        # print(cc1)

        ret = short(ones,
                    zeros,
                    0.5 * (cc1[1] + cc1[0]) + 0.4,
                    0.5 * (cc0[0] + cc0[1]) + 0.4,
                    0.5 * (cc0[1] + cc0[2]) + 0.4,
                    True)
    return ret


def short(ones, zeros, c1=1.7, c01=1.7, c02=5.2, m=False):
    if not m:
        rate1 = [x for x in ones if x <= sum(ones) / float(len(ones))]
        rate1 = float(sum(rate1)) / float(len(rate1))
        rate0 = sum(zeros) / float(len(zeros)) if zeros else 99999.0
        rate = min(rate1, rate0)
    else:
        rate = 1.0

        # print('Rate: ', rate)

    ret = ''
    while ones:
        c = ones.pop()
        if c / rate > c1:
            ret += '-'
        else:
            ret += '.'
        c = zeros.pop() if zeros else 0
        if c / rate > c02:
            ret += '   '
        elif c / rate > c01:
            ret += ' '
    return ret


def decodeMorse(morseCode):
    words = [word.split() for word in morseCode.split('   ')]
    ret = ''
    for word in words:
        for c in word:
            if c:
                try:
                    ret += MORSE_CODE[c]
                except KeyError:
                    ret += '#?#'
        ret += ' '
    return ret[:-1]

if __name__ == '__main__':
    msg
    print(decodeMorse(decodeBitsAdvanced(msg)))
